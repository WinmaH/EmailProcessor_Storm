/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.uebercomputing.mailrecord;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Attachment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attachment\",\"namespace\":\"com.uebercomputing.mailrecord\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"mimeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"data\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence fileName;
  @Deprecated public int size;
  @Deprecated public CharSequence mimeType;
  @Deprecated public java.nio.ByteBuffer data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Attachment() {}

  /**
   * All-args constructor.
   */
  public Attachment(CharSequence fileName, Integer size, CharSequence mimeType, java.nio.ByteBuffer data) {
    this.fileName = fileName;
    this.size = size;
    this.mimeType = mimeType;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return fileName;
    case 1: return size;
    case 2: return mimeType;
    case 3: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: fileName = (CharSequence)value$; break;
    case 1: size = (Integer)value$; break;
    case 2: mimeType = (CharSequence)value$; break;
    case 3: data = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fileName' field.
   */
  public CharSequence getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the 'fileName' field.
   * @param value the value to set.
   */
  public void setFileName(CharSequence value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the 'size' field.
   */
  public Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'mimeType' field.
   */
  public CharSequence getMimeType() {
    return mimeType;
  }

  /**
   * Sets the value of the 'mimeType' field.
   * @param value the value to set.
   */
  public void setMimeType(CharSequence value) {
    this.mimeType = value;
  }

  /**
   * Gets the value of the 'data' field.
   */
  public java.nio.ByteBuffer getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.nio.ByteBuffer value) {
    this.data = value;
  }

  /** Creates a new Attachment RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new Attachment RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new Attachment RecordBuilder by copying an existing Attachment instance */
  public static Builder newBuilder(Attachment other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for Attachment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attachment>
    implements org.apache.avro.data.RecordBuilder<Attachment> {

    private CharSequence fileName;
    private int size;
    private CharSequence mimeType;
    private java.nio.ByteBuffer data;

    /** Creates a new Builder */
    private Builder() {
      super(Attachment.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[2].schema(), other.mimeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Attachment instance */
    private Builder(Attachment other) {
            super(Attachment.SCHEMA$);
      if (isValidValue(fields()[0], other.fileName)) {
        this.fileName = data().deepCopy(fields()[0].schema(), other.fileName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mimeType)) {
        this.mimeType = data().deepCopy(fields()[2].schema(), other.mimeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data)) {
        this.data = data().deepCopy(fields()[3].schema(), other.data);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'fileName' field */
    public CharSequence getFileName() {
      return fileName;
    }
    
    /** Sets the value of the 'fileName' field */
    public Builder setFileName(CharSequence value) {
      validate(fields()[0], value);
      this.fileName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fileName' field has been set */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fileName' field */
    public Builder clearFileName() {
      fileName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public Integer getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public Builder setSize(int value) {
      validate(fields()[1], value);
      this.size = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'size' field */
    public Builder clearSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'mimeType' field */
    public CharSequence getMimeType() {
      return mimeType;
    }
    
    /** Sets the value of the 'mimeType' field */
    public Builder setMimeType(CharSequence value) {
      validate(fields()[2], value);
      this.mimeType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'mimeType' field has been set */
    public boolean hasMimeType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'mimeType' field */
    public Builder clearMimeType() {
      mimeType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'data' field */
    public java.nio.ByteBuffer getData() {
      return data;
    }
    
    /** Sets the value of the 'data' field */
    public Builder setData(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.data = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'data' field */
    public Builder clearData() {
      data = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Attachment build() {
      try {
        Attachment record = new Attachment();
        record.fileName = fieldSetFlags()[0] ? this.fileName : (CharSequence) defaultValue(fields()[0]);
        record.size = fieldSetFlags()[1] ? this.size : (Integer) defaultValue(fields()[1]);
        record.mimeType = fieldSetFlags()[2] ? this.mimeType : (CharSequence) defaultValue(fields()[2]);
        record.data = fieldSetFlags()[3] ? this.data : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
